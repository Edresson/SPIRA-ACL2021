{
    "model_name":"spiraconv", // voicefilter and voicesplit
    "seed":42,
    "dataset":{
        "train_csv":"../dados-exemplo/data.csv", // format path_wav, class
        "train_data_root_path": "../dados-exemplo/", // complementary path for csv
        "test_csv":"../dados-exemplo/data.csv", // format path_wav, class
        "test_data_root_path": "../dados-exemplo/", // complementary path for csv
        "noise_csv":"../dados-exemplo/noise_data.csv",// format path_wav
        "noise_data_root_path":"../dados-exemplo/", // complementary path for csv
        "control_class": 0,
        "patient_class": 1
    },
    "model":{
        "fc1_dim":100,
        "fc2_dim":1


    },
    "train_config": {
        "epochs": 1000,
        "learning_rate": 1e-2,
        "optimizer":"adam",
        "batch_size": 1,
        "seed": 42,
        "num_workers": 1,
        "logs_path": "../checkpoints/spiraconv-test/",
        "reinit_layers": null,
        "summary_interval": 2,
        "checkpoint_interval": 500
    },
    "data_aumentation":{
        "insert_noise": true, // disable/enable noise insertion
        "num_noise_control": 4, // number of diferents noise samples applied in control files 
        "num_noise_patient": 3, // number of diferents noise samples applied in control files ! we recomend num_noise_control - 1
        // You need set this values, its the maximum and minimum values for noise patients intervals.  You need to cut out the noise in several patient files and calculate the maximum maximum amplitude and the minimum maximum amplitude. An example script to get these values is available at: get_max_amp_using_noise_samples.py
        "noise_max_amp": 0.19233719,
        "noise_min_amp": 0.033474047
    },
    "test_config": {
        "batch_size": 1,
        "num_workers": 1
    },
    "audio": {
        "feature": "mfcc", // spectrogram or melspectrogram or mfcc
        // wave load paramers
        "sample_rate": 16000,
        "normalize": true, // if true, then output is divided by 1 << 31 (assumes signed 32-bit audio), and normalizes to [-1, 1]. If number, then output is divided by that number If callable, then the output is passed as a parameter to the given function, then the output is divided by the result. 

        // mel spectorgram paramers
        "num_mels": 40, // number of mels coefficients
        "mel_fmin": 0.0, // minimum freq level for mel-spec. ~50 for male and ~95 for female voices. Tune for dataset!!
        "mel_fmax": null, // maximum freq level for mel-spec. Tune for dataset!!  good value 8000.0

        // mfcc paramers
        "num_mfcc": 40, // Number of mfc coefficients to retain 
        "log_mels": false, //  whether to use log-mel spectrograms instead of db-scaled.

        // general config
        "n_fft": 1200,
        "num_freq": 601,// n_fft//2 + 1
        "hop_length": 160,
        "win_length": 400
    }
}
